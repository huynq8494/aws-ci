name: "Backend Continuous Deployment"

on:
  workflow_dispatch:  # Trigger CD manual
  push:               # Trigger CD on push events against the main branch
    branches:
      - main

env:
  NODE_VERSION: '18.x'
  REGION: 'us-east-1'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v3

      # Install the dependencies.
      - run: |
          cd backend
          pipenv install

      # Run the linter.
      - run: |
          cd backend
          npm run lint

  test:
    runs-on: ubuntu-latest
    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v3

      # Install the dependencies.
      - run: |
          cd backend
          pipenv install

      # Run the tests.
      - run: |
          cd backend
          pipenv run lint

  build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v3

      # Login ECR
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{env.REGION}}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Build application for a production deployment
      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{steps.login-ecr.outputs.registry}}
          REPOSITORY: backend
          IMAGE_TAG: ${{github.sha}}
          URL: ${{vars.REACT_APP_MOVIE_API_URL}}
        run: |
          cd backend
          docker build --tag=$REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      # Deploy Kubernetes Manifests
      - run: |
          aws eks --region ${env.REGION} update-kubeconfig --name cluster
          kustomize edit set image backend=$REGISTRY/$REPOSITORY:$IMAGE_TAG
          kustomize build | kubectl apply -f -
