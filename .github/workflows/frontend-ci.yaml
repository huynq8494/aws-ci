name: "Frontend Continuous Integration"

on:
  workflow_dispatch:  # Trigger CI manual
  pull_request:       # Trigger CI on pull_requests events against the main branch
    branches:
      - main
  push:               # FIXME: Delete this before submit
    branches:
      - main

env:
  # Set Node.js Version
  NODE_VERSION: '18.x'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v3

      # Set up a Node.js environment using the specified node version.
      - uses: actions/setup-node@v3
        with:
          node-version: ${{env.NODE_VERSION}}

      # Perform a cache action to restore cache before dependency install
      - uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}

      # Install the dependencies.
      - name: Install the dependencies
        run: |
          cd frontend
          npm ci

      # Run the linter.
      - name: Run the linter
        run: |
          cd frontend
          npm run lint

  test:
    runs-on: ubuntu-latest
    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v3

      # Set up a Node.js environment using the specified node version.
      - uses: actions/setup-node@v3
        with:
          node-version: ${{env.NODE_VERSION}}

      # Perform a cache action to restore cache before dependency install
      - uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}

      # Install the dependencies.
      - name: Install the dependencies
        run: |
          cd frontend
          npm ci

      # Run the tests.
      - name: Run the tests
        run: |
          cd frontend
          CI=true npm test

  build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v3

      # Build the application using docker
      - run: |
          cd frontend
          docker build --build-arg=REACT_APP_MOVIE_API_URL=http://localhost:5000 --tag=mp-frontend:latest .
