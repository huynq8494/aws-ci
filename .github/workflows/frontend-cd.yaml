name: "Frontend Continuous Deployment"

on:
  workflow_dispatch:  # Trigger CD manual
  push:               # Trigger CD on push events against the main branch
    branches:
      - main

env:
  NODE_VERSION: '18.x'
  REGION: 'us-east-1'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v3

      # Set up a Node.js environment using the specified node version.
      - uses: actions/setup-node@v3
        with:
          node-version: ${{env.NODE_VERSION}}

      # Perform a cache action to restore cache before dependency install
      - uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}

      # Install the dependencies.
      - name: Install the dependencies
        run: |
          cd frontend
          npm ci

      # Run the linter.
      - name: Run the linter
        run: |
          cd frontend
          npm run lint

  test:
    runs-on: ubuntu-latest
    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v3

      # Set up a Node.js environment using the specified node version.
      - uses: actions/setup-node@v3
        with:
          node-version: ${{env.NODE_VERSION}}

      # Perform a cache action to restore cache before dependency install
      - uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}

      # Install the dependencies.
      - name: Install the dependencies
        run: |
          cd frontend
          npm ci

      # Run the tests.
      - name: Run the tests
        run: |
          cd frontend
          CI=true npm test

  build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v3

      # Set up a Node.js environment using the specified node version.
      - uses: actions/setup-node@v3
        with:
          node-version: ${{env.NODE_VERSION}}

      # Login ECR
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{env.REGION}}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Build application for a production deployment
      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: frontend
          IMAGE_TAG: ${{ github.sha }}
          URL: ${{vars.REACT_APP_MOVIE_API_URL}}
        run: |
          cd frontend
          docker build --build-arg=REACT_APP_MOVIE_API_URL=$URL --tag=$REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      # Deploy Kubernetes Manifests
      - name: Deploy Kubernetes Manifests
        run: |
          cd frontend/k8s
          aws eks --region ${{env.REGION}} update-kubeconfig --name cluster
          kustomize edit set image frontend=$REGISTRY/$REPOSITORY:$IMAGE_TAG
          kustomize build | kubectl apply -f -
